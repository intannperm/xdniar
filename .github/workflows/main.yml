name: Ubuntu + ngrok (SSH & optional HTTP)

on:
  workflow_dispatch:
    inputs:
      enable_http:
        description: "Buka HTTP tunnel publik?"
        required: true
        type: choice
        default: "false"
        options: ["false", "true"]
      http_port:
        description: "Port HTTP lokal (kalau enable_http=true)"
        required: true
        default: "8080"
      ngrok_region:
        description: "Region ngrok (ap, us, eu, au, sa, jp, in)"
        required: true
        default: "ap"

jobs:
  runner:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Info OS & waktu
        run: |
          uname -a
          cat /etc/os-release
          date -u +"Start at: %Y-%m-%d %H:%M:%S UTC"

      # --- Install OpenSSH server + tools yang dibutuhkan ---
      - name: Install OpenSSH server, jq, curl
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-server jq curl
          sudo mkdir -p /run/sshd
          # Amankan SSH: nonaktifkan password login; aktifkan pubkey
          sudo sed -i 's/^#\?PasswordAuthentication .*/PasswordAuthentication no/' /etc/ssh/sshd_config
          sudo sed -i 's/^#\?PermitRootLogin .*/PermitRootLogin no/' /etc/ssh/sshd_config
          sudo sed -i 's/^#\?PubkeyAuthentication .*/PubkeyAuthentication yes/' /etc/ssh/sshd_config
          sudo sed -i 's/^#\?ChallengeResponseAuthentication .*/ChallengeResponseAuthentication no/' /etc/ssh/sshd_config
          sudo sed -i 's/^#\?UsePAM .*/UsePAM yes/' /etc/ssh/sshd_config
          sudo service ssh restart
          sudo systemctl status ssh --no-pager || true

      # --- Tambahkan authorized_keys dari secret (tanpa chown) ---
      - name: Setup SSH authorized_keys
        shell: bash
        env:
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          set -euxo pipefail
          test -n "$SSH_PUBLIC_KEY" || (echo "Secret SSH_PUBLIC_KEY kosong"; exit 1)
          install -d -m 700 "$HOME/.ssh"
          echo "$SSH_PUBLIC_KEY" >> "$HOME/.ssh/authorized_keys"
          chmod 600 "$HOME/.ssh/authorized_keys"
          ls -la "$HOME/.ssh"

      # --- Install & auth ngrok ---
      - name: Install ngrok
        run: |
          curl -sSL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz | tar zx
          sudo mv ngrok /usr/local/bin/
          ngrok version

      - name: Auth ngrok
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          test -n "$NGROK_AUTHTOKEN" || (echo "Secret NGROK_AUTHTOKEN kosong"; exit 1)
          ngrok config add-authtoken "$NGROK_AUTHTOKEN"

      # --- Start ngrok TCP 22 untuk SSH ---
      - name: Start ngrok TCP 22 (SSH)
        env:
          NGROK_REGION: ${{ inputs.ngrok_region }}
        run: |
          nohup ngrok tcp 22 --region "${NGROK_REGION}" --log=stdout > ngrok-ssh.log 2>&1 &
          # Tunggu dashboard siap, lalu ambil URL tcp
          for i in {1..30}; do
            if curl -sf http://127.0.0.1:4040/api/tunnels | jq -e '.tunnels[] | select(.proto=="tcp")' > /dev/null; then
              break
            fi
            sleep 2
          done
          echo "---- NGROK TUNNELS ----"
          curl -s http://127.0.0.1:4040/api/tunnels | jq .
          TCP_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[] | select(.proto=="tcp") | .public_url')
          echo "NGROK_TCP_URL=$TCP_URL" >> $GITHUB_ENV

      - name: Cara konek SSH
        run: |
          if [ -z "${NGROK_TCP_URL:-}" ]; then
            echo "Gagal ambil NGROK_TCP_URL"; exit 1
          fi
          HOST=$(echo "$NGROK_TCP_URL" | sed -E 's#^tcp://([^:]+):([0-9]+)$#\1#')
          PORT=$(echo "$NGROK_TCP_URL" | sed -E 's#^tcp://([^:]+):([0-9]+)$#\2#')
          echo ""
          echo "========================================"
          echo "🔐 SSH ke GitHub Runner via ngrok:"
          echo "Host : $HOST"
          echo "Port : $PORT"
          echo ""
          echo "Perintah (Linux/macOS/Termux):"
          echo "  ssh -o StrictHostKeyChecking=no runner@${HOST} -p ${PORT}"
          echo "========================================"
          echo ""

      # --- Opsional: HTTP tunnel untuk preview web/app ---
      - name: Start ngrok HTTP (optional)
        if: ${{ inputs.enable_http == 'true' }}
        env:
          NGROK_REGION: ${{ inputs.ngrok_region }}
          HTTP_PORT: ${{ inputs.http_port }}
        run: |
          nohup ngrok http "http://127.0.0.1:${HTTP_PORT}" --region "${NGROK_REGION}" --log=stdout > ngrok-http.log 2>&1 &
          for i in {1..30}; do
            if curl -sf http://127.0.0.1:4040/api/tunnels | jq -e '.tunnels[] | select(.proto=="https")' > /dev/null; then
              break
            fi
            sleep 2
          done
          HTTPS_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[] | select(.proto=="https") | .public_url')
          echo "NGROK_HTTPS_URL=$HTTPS_URL" >> $GITHUB_ENV
          echo ""
          echo "========================================"
          echo "🌐 HTTP publik via ngrok:"
          echo "URL : ${HTTPS_URL}"
          echo "Jalankan app kamu di port ${{ inputs.http_port }}."
          echo "Contoh cepat:  nohup python3 -m http.server ${{ inputs.http_port }} > web.log 2>&1 &"
          echo "========================================"
          echo ""

      # --- Keep-alive sampai job selesai ---
      - name: Keep-alive
        run: |
          echo "Tunnels aktif. Workflow akan hidup sampai timeout (~360 menit) atau kamu cancel."
          while true; do date -u +"Heartbeat: %Y-%m-%d %H:%M:%S UTC"; sleep 60; done
