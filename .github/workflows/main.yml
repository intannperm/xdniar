name: Ubuntu + ngrok (SSH + HTTP 8080)

on:
  workflow_dispatch: {}

jobs:
  runner:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Info OS & waktu
        run: |
          uname -a
          cat /etc/os-release
          date -u +"Start at: %Y-%m-%d %H:%M:%S UTC"

      # Install OpenSSH + paksa pubkey-only
      - name: Install OpenSSH, jq, curl dan set sshd (pubkey only)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y openssh-server jq curl
          sudo mkdir -p /run/sshd
          # Drop-in config agar pubkey-only
          echo "PasswordAuthentication no"            | sudo tee /etc/ssh/sshd_config.d/99-actions.conf
          echo "PubkeyAuthentication yes"             | sudo tee -a /etc/ssh/sshd_config.d/99-actions.conf
          echo "ChallengeResponseAuthentication no"   | sudo tee -a /etc/ssh/sshd_config.d/99-actions.conf
          echo "UsePAM yes"                           | sudo tee -a /etc/ssh/sshd_config.d/99-actions.conf
          echo "AuthorizedKeysFile .ssh/authorized_keys" | sudo tee -a /etc/ssh/sshd_config.d/99-actions.conf
          sudo service ssh restart
          # Lihat config efektif (sekadar verifikasi di log)
          sudo sshd -T | egrep 'passwordauthentication|pubkeyauthentication|authorizedkeysfile|usepam' || true

      # authorized_keys dari secret (tanpa chown)
      - name: Setup authorized_keys
        shell: bash
        env:
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          set -euxo pipefail
          test -n "$SSH_PUBLIC_KEY" || (echo "Secret SSH_PUBLIC_KEY kosong"; exit 1)
          install -d -m 700 "$HOME/.ssh"
          printf "%s\n" "$SSH_PUBLIC_KEY" > "$HOME/.ssh/authorized_keys"
          sed -i 's/\r$//' "$HOME/.ssh/authorized_keys"   # buang CRLF jika ada
          chmod 600 "$HOME/.ssh/authorized_keys"
          ls -ld "$HOME/.ssh"; ls -l "$HOME/.ssh/authorized_keys"
          echo -n "authorized_keys head: "; head -c 40 "$HOME/.ssh/authorized_keys" || true; echo

      # Install & auth ngrok
      - name: Install & auth ngrok
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          set -euxo pipefail
          curl -sSL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz | tar zx
          sudo mv ngrok /usr/local/bin/
          ngrok config add-authtoken "$NGROK_AUTHTOKEN"
          ngrok version

      # Tunnel SSH (TCP 22)
      - name: Start ngrok TCP 22 (SSH)
        run: |
          set -euxo pipefail
          nohup ngrok tcp 22 --region ap --log=stdout > ngrok-ssh.log 2>&1 &
          # Tunggu dashboard siap & ambil URL
          for i in {1..30}; do
            if curl -sf http://127.0.0.1:4040/api/tunnels | jq -e '.tunnels[] | select(.proto=="tcp")' > /dev/null; then break; fi
            sleep 2
          done
          echo "=== Tunnels ==="
          curl -s http://127.0.0.1:4040/api/tunnels | jq .
          TCP_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[] | select(.proto=="tcp") | .public_url')
          echo "NGROK_TCP_URL=$TCP_URL" >> $GITHUB_ENV

      - name: Cara konek SSH
        run: |
          set -euxo pipefail
          HOST=$(echo "$NGROK_TCP_URL" | sed -E 's#^tcp://([^:]+):([0-9]+)$#\1#')
          PORT=$(echo "$NGROK_TCP_URL" | sed -E 's#^tcp://([^:]+):([0-9]+)$#\2#')
          echo ""
          echo "========================================"
          echo "🔐 SSH via ngrok:"
          echo "Host : $HOST"
          echo "Port : $PORT"
          echo ""
          echo "Perintah (Linux/macOS/Termux):"
          echo "  ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 runner@${HOST} -p ${PORT}"
          echo "========================================"
          echo ""

      # Tunnel HTTP 8080
      - name: Start ngrok HTTP 8080 (Web preview)
        run: |
          set -euxo pipefail
          nohup ngrok http 8080 --region ap --log=stdout > ngrok-http.log 2>&1 &
          for i in {1..30}; do
            if curl -sf http://127.0.0.1:4040/api/tunnels | jq -e '.tunnels[] | select(.proto=="https")' > /dev/null; then break; fi
            sleep 2
          done
          HTTPS_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[] | select(.proto=="https") | .public_url')
          echo "NGROK_HTTPS_URL=$HTTPS_URL" >> $GITHUB_ENV
          echo ""
          echo "========================================"
          echo "🌐 HTTP publik via ngrok (port 8080):"
          echo "URL : ${HTTPS_URL}"
          echo "Jalankan app kamu di port 8080."
          echo "Contoh cepat:  nohup python3 -m http.server 8080 > web.log 2>&1 &"
          echo "========================================"
          echo ""

      # Keep-alive sampai timeout
      - name: Keep-alive
        run: |
          echo "Tunnels aktif. Workflow hidup sampai timeout (~360 menit) atau kamu cancel."
          while true; do date -u +"Heartbeat: %Y-%m-%d %H:%M:%S UTC"; sleep 60; done
